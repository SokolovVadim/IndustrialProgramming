#include "Differ.h"

// нужно написать функцию представления любой записи
// в том виде, в котором уже работает запись в дерево
//
//


 int main()
 {
	FopenFiles();

	size_t size = SizeofFile();

	Tree *head = ConstrTree();

	int flag = 0;


	Separator(Read(size), head->root, head, true, &flag);


	fprintf(Log, "HEAD->ROOT->DATA = %s\n", head->root->data);

	//CreateTree(Read(size), 0, head, nullptr);

	//PrintDot(head);
	//PrintText(head);

	fclose(Fin);
	//system("start Run.bat");
	//system("pause");

 }


 void Brackets(Node* node, Tree* head, int position, char* buff, char** left, char** right)
 {
	 int counter (position);
	 int begin   (0);
	 int end     (0);

	 //char* buff_left_side = (char*)calloc(SIZEBUFF, sizeof(char));
	 //char* buff_right_side = (char*)calloc(SIZEBUFF, sizeof(char));

	 //ASSERT(buff_left_side);
	 //ASSERT(buff_right_side);

	 if (buff[position] == '-')
	 {
		 while (buff[counter] != '\0')
		 {
			 if (buff[counter] == '(')
			 {
				 begin = counter;
				 fprintf(Log, "Begin = %d\telem = %c\n", begin, buff[begin + 1]);
				 while (buff[counter] != '\0')
				 {
					 if (buff[counter] == ')')
					 {
						 fprintf(Log, "buff[counter - 1] = %c\n"
							 "[counter] = %d\n", buff[counter - 1], counter);
						 end = counter;
						 strncmp(*left, buff, counter);
						 strcat_s(*left, strlen(buff) - end, buff + end + 1);
						 fprintf(Log, "\nLEFT BRACK: %s\n\n", *left);
						 strncmp(*right, buff + begin + 1, end - begin);
						 fprintf(Log, "\nRIGHT BRACK: %s\n\n", *right);
					 }
					 counter++;
				 }
			 }

			 counter++;
		 }
	 }
 }



 char* Separator(char* buff, Node* node, Tree* head, bool param, int* flag)
 {
	 ASSERT(buff);
	 char* buff_left_side  = (char*)calloc(SIZEBUFF, sizeof(char));
	 char* buff_right_side = (char*)calloc(SIZEBUFF, sizeof(char));
	 char* new_buffer      = (char*)calloc(SIZEBUFF, sizeof(char));

	 ASSERT  (buff_left_side);
	 ASSERT  (buff_right_side);
	 ASSERT  (new_buffer);

	 fprintf(Fout, "buff = %s\n", buff);

	 int counter(0);
	 while (buff[counter] != '\0')
	 {
		 if ((buff[counter] == '+')||(buff[counter] == '-'))
		 {
			 Brackets(node, head, counter, buff, &buff_left_side, &buff_right_side);
			 (*flag)++;
			 new_buffer[0] = buff[counter];
			 strncpy_s(buff_left_side, SIZEBUFF, buff, counter);
			 strncpy_s(buff_right_side, SIZEBUFF, buff + counter + 1, strlen(buff) - counter);
			 fprintf(Fout, "left: %s\n", buff_left_side);
			 fprintf(Fout, "right: %s\n", buff_right_side);
			 if (node)
			 {
				 if (param == true)
					 CreateNode(head, node, buff_left_side, buff_right_side, new_buffer, true, flag);
				 else
				 {
					 CreateNode(head, node, buff_left_side, buff_right_side, new_buffer, false, flag);
				 }
			 }
			 else
				 CreateNode(head, node, buff_left_side, buff_right_side, new_buffer, true, flag);

			 break;
		 }
		 counter++;
	 }


	 return buff;////!!!!!!!!!!!!!!!! return new buff
 }






 Node* CreateNode(Tree* head, Node* node, char* left, char* right, char* middle, bool param,int* flag)
 {
	 Node* NewNode   = (Node*)calloc(1, sizeof(Node));
	 Node* LeftNode  = (Node*)calloc(1, sizeof(Node));
	 Node* RightNode = (Node*)calloc(1, sizeof(Node));

	 fprintf(Log, "flsg: %d\n", *flag);

	 NewNode->Left = LeftNode;
	 NewNode->Right = RightNode;

	 char* ID = (char*)calloc(SIZEBUFF, sizeof(char));
	 ASSERT(ID);


	 _itoa_s(*flag, ID, SIZEBUFF, 10);
	 fprintf(Log, "ID: %s\n", ID);

	 strcat_s(middle, SIZEBUFF, "(");
	 strcat_s(middle, SIZEBUFF, ID);
	 strcat_s(middle, SIZEBUFF, ")");

	 NewNode->data = middle;

	 NewNode->Left->data = left;//2
	 NewNode->Right->data = right;//6
	 NewNode->Left->Parent = NewNode;//+
	 NewNode->Right->Parent = NewNode;//+
	 NewNode->Parent = node;
	 if (node)
	 {
		 if (node->Parent)
		 {
			 {
				 
				 NewNode->Parent = node->Parent;
				 node->Parent->Right = NewNode;

				 fprintf(Fout, "NewNode->Parent->data = %s\n", NewNode->Parent->data);

				 NewNode->Left = node;//-

				 fprintf(Fout, "NewNode->Left-data = %s\n", NewNode->Left->data);

				 node->Parent = NewNode;

				 node->Right->data = left;

				 fprintf(Log, "Node->Parent->data = %s\n", node->Parent->Parent->Right->data);

				 fprintf(Log, "Left = %s Right = %s Node->data = %s\n", left, right, node->data);
				 if (head->root)
					 if (head->root->Right)
					 {
						 fprintf(Log, "Head->root->data: %s\nHead->root->right->data: %s\n", head->root->data, head->root->Right->data);
					 }
					 
			 }
		 }
		 else
		 {
			 if (param)
				 node->Left = NewNode;
			 else
				 node->Right = NewNode;
		 }
	 }
	 else
	 {
		 node = NewNode;
		 head->root = NewNode;
	 }


	 if(CheckSimbol(left))
		 Separator(left, NewNode, head, true, flag);
	 if(CheckSimbol(right))
		 Separator(right, NewNode, head, false, flag);

	 return NewNode;
 }



 bool CheckSimbol(char* word)
 {
	 int counter(0);
	 while (word[counter] != '\0')
	 {
		 if ((word[counter] == '+') || (word[counter] == '-'))
		 {
			 return true;
			 
		 }
		 counter++;
	 }
	 return false;

 }


 void FopenFiles()
 {
	fopen_s(&Fin,  "INPUT.txt",  "r");
	fopen_s(&Fout, "OUTPUT.txt", "w");
	fopen_s(&Log,  "LOGOUT.txt", "w");
	assert(Fin);
	assert(Fout);
	assert(Log);


 }

 Tree* ConstrTree()
 {
	 Tree* CurTree;
	 void *pointer = calloc(1, sizeof(Tree));
	 if (Checker(pointer))
	 {
		 CurTree = (Tree*)pointer;
		 return CurTree;
	 }
	 else
	 {
		 fprintf(Log, "Warning! Tree was not constructed!\n");
		 return nullptr;
	 }
 }


 void Traversal(Node* node)
 {
	if (node->Left)
	{
		Traversal(node->Left);
	}
	else
	{
		if (node->Right)
			Traversal(node->Right);
		else
		{
			fprintf(Fout, "%s\n", node->data);
		}
	}
 }

 size_t SizeofFile()
 {
	ASSERT(Fin);

	fseek(Fin, 0, SEEK_END);

	int size(ftell(Fin));

	fseek(Fin, 0, SEEK_SET);


	assert(size > 0);

	return size;
 } 

 char* Read(size_t size)
 {

	char* buffer = (char*)calloc(SIZEBUFF, sizeof(double));

	ASSERT(buffer);

	int CheckDigit = fread(buffer, sizeof(char), size, Fin);

	buffer[size] = '\0';

	fprintf(Fout, "BUFFER: %s\n", buffer);

	BOOLCHECK(CheckValue(CheckDigit));


	return buffer;

 }

 int CreateTree(char* buff, int position, Tree* head, Node* node)
 {

	 Node* NewNode = (Node*)calloc(1, sizeof(Node));

	 char* firstbuffer = (char*)calloc(SIZEBUFF, sizeof(char));

	 if (buff[position] == '(')
	 {
		 position += 1;// avoid '(' & '\"' simbols
		 int counter(0);
		 while ((buff[position] != '(') && (buff[position] != ')'))
		 {
			 if ((buff[position] != '\n') && (buff[position] != '\r')
				 && (buff[position] != '\t') && (buff[position] != ' '))
			 {
				 firstbuffer[counter] = buff[position];
				 counter++;
			 }
			 position++;
		 }
		 firstbuffer[counter] = '\0';
		 fprintf(Log, "buff = %s\n", firstbuffer);
		 NewNode = AddElem(head, node, firstbuffer);

	 }

	 for (; ;)
	 {
		 while ((buff[position] != '(') && (buff[position] != ')'))// Avoid space & \n
		 {
			 position++;
		 }



		 if (buff[position] == ')')
		 {
			 return position + 1;
		 }



		 if (buff[position] == '(')
		 {
			 position = CreateTree(buff, position, head, NewNode);
		 }

	 }

 }


 void AvoidSpace(char** buff)
 {
	 ASSERT(*buff);
	 (*buff)++;
	 while ((**buff) != '\0')
	 {
		 if (((**buff) == ' ') || ((**buff) == '\n'))
			 (*buff)++;
		 else
			 break;
	 }
 }


 Node* AddElem(Tree* head, Node* node, NodeType value)
 {
	 ASSERT(head);
	 Node* NewNode = (Node*)calloc(1, sizeof(Node));

	 NewNode->data = value;
	 NewNode->Parent = node;
	 head->counter++;

	 if (head->root == nullptr)
	 {
		 head->root = NewNode;
		 return NewNode;
	 }

	 if (!node->Left)
		 node->Left = NewNode;
	 else
		 if (!node->Right)
			node->Right = NewNode;

	 return NewNode;
 }


 //int CreateTree(int position, char *buff, Node* node, Tree* head)
 //{
	// Node* NewNode = (Node*)calloc(1, sizeof(Node));

	// 




 //}

 void PrintDot(Tree* head)
 {
	 assert(head);
	 assert(head->root);
	 fopen_s(&Dot, "DOTOUT.vg", "w");
	 fprintf(Dot, "digraph Tree{\n");
	 PrintGraph(head->root);
	 fprintf(Dot, "\n}");
	 fclose(Dot);
 }


 void PrintGraph(Node* node)
 {
	 if (node->Left)
	 {
		 fprintf(Dot, "\"%s\"", node->data);
		 fprintf(Dot, "->\"%s\";\n", node->Left->data);
		 PrintGraph(node->Left);
	 }


	 if (node->Right)
	 {
		 fprintf(Dot, "\"%s\"", node->data);
		 fprintf(Dot, "->\"%s\";\n", node->Right->data);
		 PrintGraph(node->Right);
	 }
 }

 void PrintText(Tree* head)
 {
	 WriteTree(head->root);
 }


 void WriteTree(Node* node)
 {
	 fprintf(Fin, "(\"%s\"\n", node->data);
	 if ((node->Left) || (node->Right))
	 {
		 if (node->Left)
		 {
			 WriteTree(node->Left);
			 if (!(node->Right))
				 fprintf(Fin, ")\n");
		 }

		 if (node->Right)
		 {
			 WriteTree(node->Right);
			 fprintf(Fin, ")\n");
		 }
	 }
	 else
	 {
		 if (node->Parent != nullptr)
			 fprintf(Fin, ")\n");
	 }
 }






 inline bool CheckValue(int value)
 {
	 if (value <= 0)
		 return false;
	 else
		 return true;
	 return true;
 }

 #undef ASSERT
 #undef BOOLCHECK
