 #include <iostream>
 #include <cassert>
 #include <Windows.h>
 #include <Mmsystem.h>
 #include <conio.h>
 #include <cstdlib>
 #include "ASMHeader.h"
 #pragma comment(lib, "winmm.lib")
 



 #define ASSERT( BUFF , BUFFER )                                 \
	 do {                                                        \
	     if(!BUFF)                                               \
         {                                                       \
              fprintf(Log, "Warning! " #BUFF " is NULL\n");      \
              exit(EXIT_FAILURE);                                \
		 }                                                       \
         if(!BUFFER)                                             \
         {                                                       \
	          fprintf(Log, "Warning! " #BUFFER " is NULL\n");    \
              exit(EXIT_FAILURE);                                \
         }                                                       \
	 } while(0)



//!++++++++++++++++++++++++++++++++++++++++++++++//
//! @brief This macros receives two arguments 
//!        and the param is not a log file.
//!        For this situation you should use
//!        assert() without macros
//! @param FILEINPUT
//! @param FILEOUTPUT
//!++++++++++++++++++++++++++++++++++++++++++++++//

#define ASSERTFILE( FILEIN, FILEOUT )                      \
do                                                         \
{                                                          \
	if (FILEIN == nullptr)                                 \
	{                                                      \
		 fprintf(Log, "Warning! " #FILEIN " is NULL\n");   \
	}                                                      \
	if (FILEOUT == nullptr)                                \
	{                                                      \
		 fprintf(Log, "Warning! " #FILEOUT " is NULL\n");  \
	}                                                      \
} while(0)




 int main()
 {
	 FopenFiles();

	 /* PlayKotik();*/

	 long size = Size();
	 char *buff = Read(size);

	 buff = nullptr;
	 ASSERT(buff, buff);

	 /*Asm(buff, size);*/

	 /*system("pause");*/
 }

 void PlayKotik()
 {
	PlaySoundA    ("Mew.wav", NULL , SND_FILENAME | SND_ASYNC |SND_LOOP);
	PlaySoundA    ("Antihype.wav", NULL, SND_FILENAME | SND_ASYNC | SND_LOOP);
 }

 void FopenFiles()
 {
 	fopen_s(&Fin,  "INPUT.txt", "rb");
 	fopen_s(&Fout, "OUTPUT.txt", "w");
	fopen_s(&Text, "TEXT.txt", "w");
	fopen_s(&Bin,  "BINOUT.txt", "wb");
	fopen_s(&Log, "LOGS.txt", "w");
	if (Bin == nullptr)
	{
		exit(EXIT_FAILURE);
	}
 }

 char* Read(long size)
 {
	 assert(size != POISON);
	 char* buff;
     char* pointer = (char *) calloc(size, sizeof(char));

     if (pointer == nullptr)
     {
		 fprintf(Log, "WARNING! Buff was not declared!\n");
		 return 0;
	 }

	 else
	 {
		 buff = pointer;
		 fread(buff, sizeof(char), size, Fin);
	 }

 	 return buff;
 }

 long Size()
 {
	 assert(Fin);
	 fseek(Fin, NULL, SEEK_END);


	 long size(ftell(Fin));
	 size++;

	 fseek(Fin, NULL, SEEK_SET);
	 return size;
 }




 void Asm(char *buff, long size)
 {
	 ASSERT(buff, buff);       //double arg
	 assert(size > 0);

	 int   counter(0);
	 int   differ(0);
	 int   newcounter(0);
	 int   num(0);
	 char  buffer[SIZEBUFF];
	 char* binbuff;
	 char* pointer = (char*)calloc(size * sizeof(double), sizeof(double));
	 if (pointer == nullptr)
	 {
		 fprintf(Log, "WARNING! Binbuff was not declared!\n");
		 assert(pointer);
	 }
	 else
	 {
		 binbuff = pointer;
		 while (counter < size)
		 {
			 (sscanf_s(buff, "%s", buffer, SIZEBUFF));// put cmd in buffer

			 differ = IncreasePtr(buff, buffer, counter);
			 buff += differ;
			 counter += differ;

			 differ = CMP(buffer, buff, counter, binbuff);
			 if (differ == -1)
			 {
				 break;
			 }
			 buff += differ;
			 counter += differ;
		 }
	 }
 }
	 

	 /*
	 CPU:

	 while(arr[counter])
	 {
	 		 
	 switch(arr[counter])
	 case 1:
		 double arg = *((double *)(arr + nowcounter + 1))
		 nowcounter += 8

		 ....
		 	 
	 nowcounter++;
	 }
	 */
 
 inline bool check(char *buff)
 {
	 return (buff == NULL) ? false : true;
 }


 int CMP(char buffer[SIZEBUFF], char *buff, long counter, char* binbuff)
 {
	 ASSERT(buff, buffer);
	 if ((check(buff)) && (check(binbuff)) && (check(buffer)))
	 {
		 #include "Commands.h"
		 #define CMD_DEF( name , num , sizearg , sizeelem , command)   \
                 else if (!strcmp(buffer, #name)){\
                      int differ = Choice(buff, num, sizearg,\
						  sizeelem, buffer, counter);\
                      return differ;\
                      }
		 if (0)
		 {
			 ;
		 }
		 #include "CMD.h"
		 else
		 {
			 fprintf(Fout, "Unknown command\n");
			 return POISON;
		 }
		 #undef CMD_DEF


	 }
	 else
	 {
		 fprintf(Log, "Warning! CMP has a damaged argument!\n"
			 "Line: %ld", __LINE__);
		 return -1;
	 }
 }

 int Choice(char* buff, int num, int sizearg,
	 int sizeelem, char buffer[SIZEBUFF], int counter)
 {
	 enum Command
	 {
		 cmd_push = 1,
		 cmd_pushr,
		 cmd_begin,
		 cmd_pop,
		 cmd_popr,
		 cmd_back,
		 cmd_size,
		 cmd_resize,
		 cmd_clear,
		 cmd_jmp,
		 cmd_jxx,
		 cmd_ja,
		 cmd_end,
		 cmd_add,
		 cmd_in,
		 cmd_out,
		 cmd_mul,
		 cmd_sub,
		 cmd_div,
		 cmd_cmp,
		 cmd_and,
		 cmd_or,
		 cmd_not,
		 cmd_xor,
		 cmd_call,
		 cmd_fsqrt,
	 };

	 if (sizearg>0)
		 Printbfr(num, buffer);// распеч. команду

	 switch (num)
	 {
	 case cmd_pop:
	 {
		 Print(num, buffer);
		 return 0;
	 }
	 case cmd_pushr:
	 {
		 sscanf_s(buff, "%s", buffer, SIZEBUFF); // считать аргумент
		 fprintf(Log, "%s", buffer);
		 int differ = IncreasePtr(buff, buffer, counter);
		 buff += differ;
		 switch (sizeelem)
		 {
		 case sizeof(char) :
		 {
			 if (num == cmd_popr)
			 {
				 Printreg(buffer);
				 return differ;
			 }
			 else
			 {
				 ;
			 }
			 return 0;
		 }
		 };
	 }
	 //case 1:
	 //{
	 // Print(num, buffer);// распеч. команду
	 // sscanf_s(buff, buffer, SIZEBUFF); // считать аргумент
	 // int differ = IncreasePtr(buff, buffer, counter);
	 // buff += differ;
	 // 
	 // switch (sizeelem)// в зависимости от типа эл. организовать вывод
	 // {
	 // case sizeof(char):
	 // {
	 //           
	 //	 sscanf_s(buff, buffer, SIZEBUFF);
	 //	 buff += IncreasePtr(buff, buffer, counter);
	 //	 if (num == cmd_pop)
	 //	 {
	 //		 Printreg(buffer);
	 //	 }
	 //	 break;
	 // }
	 // case sizeof(int):
	 // {
	 //	 sscanf_s(buff, buffer, SIZEBUFF);
	 //	 buff += IncreasePtr(buff, buffer, counter);
	 //	 if (isdigit(buffer[0]))
	 //	 {
	 //		 Printi(buffer);
	 //	 }
	 //	 break;
	 // }
	 // case sizeof(double):
	 // {
	 //	 sscanf_s(buff, buffer, SIZEBUFF);
	 //	 buff += IncreasePtr(buff, buffer, counter);
	 //	 Printd(buffer);
	 //	 break;
	 // }
	 // default:
	 // {
	 //	 return 0;// !!//
	 // }
	 // };
	 // return differ;
	 //}
	 default:
	 {
		 return 0;
	 }
	 };
 }


 long IncreasePtr(char *buff, char buffer[SIZEBUFF], long counter)
 {
	 int differ = strlen(buffer) + 1;
	 buff += differ;// increase pointer *buff
	 if (*buff == '\0')// avoid '\0'
	 {
		 differ++;
	 }
	 return differ;
 }



 void Print(int num, char name[SIZEBUFF])
 {
	 ASSERTFILE(Fout, Text);
	 assert(Log);
	 if (check(name))
	 {
		 fprintf(Text, "%d\n", num);
		 fprintf(Fout, "%s\n", name);
	 }
	 else
	 {
		 fprintf(Log, "Warning! Print was crashed!\n");
	 }
 }


 void Printbfr(int num, char name[SIZEBUFF])
 {
	 ASSERTFILE(Fout, Text);
	 assert(Log);
	 if (check(name))
	 {
		 fprintf(Text, "%d\t", num);
		 fprintf(Fout, "%s\t", name);
	 }
	 else
	 {
		 fprintf(Log, "Warning! Print was crashed!\n");
	 }
 }
 
 void Printreg(char buffer[SIZEBUFF])
 {
	 ASSERTFILE(Fout, Text);
	 assert(Log);
	 if(isalpha(buffer[0]))
	 {
		 fprintf(Fout, "!%s\n", buffer);
		 fprintf(Text, "%d\n", (buffer[0] - 'a'));
	 }
 }

 void Printi(char buffer[SIZEBUFF])
 {
	 ASSERTFILE(Fout, Text);
	 assert(Log);
	 fprintf(Fout, "%s\n", buffer);
	 fprintf(Text, "%d\n", atoi(buffer));
 }

 void Printd(char buffer[SIZEBUFF])
 {
	 ASSERTFILE(Fout, Text);
	 assert(Log);
	 if (strtod(buffer, nullptr))
	 {
		 fprintf(Fout, "%s\n", buffer);
		 fprintf(Text, "%lf\n", strtod(buffer, nullptr));
	 }
 }


 void PrintBuff(char buffer[SIZEBUFF], int counter)
 {
	 ASSERTFILE(Fout, Text);
	 assert(Log);
	 fprintf(Fout, "!");
	 for (int i(0); i < counter; ++i)
		 fprintf(Fout, "%c", buffer[i]);
	 fprintf(Fout, "!");
 }


 void  End(char *buff, char* binbuff, char buffer[SIZEBUFF])
 {
	 free(buff);
	 free(binbuff);
	 free(buffer);
	 fclose(Fin);
	 fclose(Fout);
	 fclose(Bin);
	 fclose(Log);
	 fclose(Text);
 }

 #undef ASSERT
